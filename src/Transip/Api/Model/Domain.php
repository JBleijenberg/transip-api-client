<?php
/**
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the General Public License (GPL 3.0)
 * that is bundled with this package in the file LICENSE
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/GPL-3.0
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future.
 *
 * @author      Jeroen Bleijenberg
 *
 * @copyright   Copyright (c) 2017
 * @license     http://opensource.org/licenses/GPL-3.0 General Public License (GPL 3.0)
 */
namespace Transip\Api\Model;

use Transip\Api\Helper\DomainHelper;
use Transip\Api\Model\Domain\Branding;

class Domain
{

    /**
     * The name, including the tld of this domain
     *
     * @var string  $name
     */
    private $name;

    /**
     * The list of nameservers (with optional gluerecords) for this domain
     *
     * @var array   $nameservers
     */
    private $nameservers = [];

    /**
     * The list of WhoisContacts for this domain
     *
     * @var array   $contacts
     */
    private $contacts = [];

    /**
     * The list of DnsEntries for this domain
     *
     * @var array   $dnsEntries
     */
    private $dnsEntries = [];

    /**
     * The branding for this domain, some Tlds support additional
     * whois- and transfer-branding which will be stored in this variable.
     * Even if a Tld does not support  branding, it will
     * always be stored in this variable for consistency.
     *
     * @var Branding    $branding
     */
    private $branding;

    /**
     * The authcode for this domain as generated by the registry. Read-only.
     *
     * @var string  $authCode
     * @readonly
     */
    private $authCode;

    /**
     * If this domain supports locking, this flag is true when the domain is locked
     * at the registry, false if not. Read-only.
     *
     * Use Transip_DomainService::setLock() to change the lock status of a domain.
     *
     * @var boolean $isLocked
     * @readonly
     */
    private $isLocked = false;

    /**
     * Registration date of the domain, in YYYY-mm-dd format. Read-only.
     *
     * @var string
     * @readonly
     */
    private $registrationDate;

    /**
     * Next renewal date of the domain, in YYYY-mm-dd format. Read-only.
     *
     * @var string
     * @readonly
     */
    private $renewalDate;

    /**
     * @var DomainHelper
     */
    private $helper;

    /**
     * @param string    $name   the domain name of the domain, including tld
     */
    public function __construct($name)
    {
        $this->setName($name);
    }

    /**
     * Set the domain name of the domain, including tld
     *
     * @param $name     string
     * @return $this
     * @throws \Exception
     */
    public function setName($name)
    {
        if (is_string($name)) {
            $this->name = $name;
        } else {
            throw new \Exception('Invalid name supplied. Only string are allowed');
        }

        return $this;
    }

    /**
     * Get the DNS name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set an array of nameservers (with optional gluerecords) for this domain
     *
     * @param array $nameservers
     * @return $this
     */
    public function setNameServers(array $nameservers)
    {
        array_filter($nameservers, function($n) {
            if ($n instanceof Nameserver) {
                $this->nameservers[] = $n;
            } else {
                throw new \Exception('Invalid Nameserver object. Must be an instance of \Transip\Api\Model\Nameserver');
            }
        });

        return $this;
    }

    /**
     * Return an array of nameservers
     *
     * @return array
     */
    public function getNameServers()
    {
        return $this->nameservers;
    }

    /**
     * Set the array of WhoisContacts for this domain
     *
     * @param array $contacts
     * @return $this
     */
    public function setContacts(array $contacts)
    {
        array_filter($contacts, function($c) {
            if ($c instanceof WhoisContact) {
                $this->contacts[] = $c;
            } else {
                throw new \Exception('Invalid Nameserver object. Must be an instance of \Transip\Api\Model\WhoisContact');
            }
        });

        return $this;
    }

    /**
     * Return an array of WhoisContacts
     *
     * @return array
     */
    public function getContacts()
    {
        return $this->contacts;
    }

    /**
     * Set an array of DnsEntries for this domain
     *
     * @param array $dnsEntries
     * @return $this
     */
    public function setDnsEntries(array $dnsEntries)
    {
        $this->dnsEntries = [];

        array_filter($dnsEntries, function($d) {
            if ($d instanceof DnsEntry) {
                $this->dnsEntries[] = $d;
            } else {
                throw new \Exception('Invalid Nameserver object. Must be an instance of \Transip\Api\Model\DnsEntry');
            }
        });

        return $this;
    }

    public function addDnsEntry(DnsEntry $dns)
    {
        $duplicate = array_filter($this->getDnsEntries(), function($a) use ($dns) {
            /** @var DnsEntry   $a */
            if ($a->getName() == $dns->getName() && $a->getType() == $dns->getType() && $a->getContent() == $dns->getContent()) {
                return true;
            }
        });

        if (!empty($duplicate)) {
            throw new \Exception('Duplicate DNS record found for: %s %s %s' . $dns->getName());
        } else {
            $this->dnsEntries[] = $dns;

            $this->dnsEntries = array_values($this->dnsEntries);
        }

        return $this;
    }

    /**
     * Remove selected entry from list
     *
     * @param $id
     * @return $this
     * @throws \Exception
     */
    public function deleteDnsEntry($id)
    {
        if (array_key_exists($id, $this->dnsEntries)) {
            unset($this->dnsEntries[$id]);

            $this->dnsEntries = array_values($this->dnsEntries);
        } else {
            throw new \Exception('No DNS record found with ID: ' . $id);
        }

        return $this;
    }

    /**
     * Return a array of DNS entries
     *
     * @param null $key
     * @return array|DnsEntry
     * @throws \Exception
     */
    public function getDnsEntries($key = null)
    {
        if ($key !== null) {
            if (array_key_exists($key, $this->dnsEntries)) {
                return $this->dnsEntries[$key];
            } else {
                throw new \Exception('Invalid DNS Entry ID given. The ID given was: ' . $key);
            }
        }

        return $this->dnsEntries;
    }

    public function getDnsEntryIdByName($name, $type)
    {
        $arrayID = array_search(trim($name), array_map(function ($a) {
            /** @var DnsEntry $a */
            return $a->getName();
        }, $this->getDnsEntries()));

        if (is_integer($arrayID)) {
            $dnsEntry = $this->getDnsEntries($arrayID);

            if ($dnsEntry->getType() == trim($type)) {
                return $arrayID;
            }
        }

        throw new \Exception(sprintf("DNS entry not found. The name given was %s, the type given was %s", $name, $type));
    }

    /**
     * Get DNS entry object by name
     *
     * @param $name
     * @param $type
     * @return array|DnsEntry
     */
    public function getDnsEntryByName($name, $type)
    {
        return $this->getDnsEntries(
            $this->getDnsEntryIdByName($name, $type)
        );
    }

    /**
     * Set branding
     *
     * @param $branding
     * @return $this
     * @throws \Exception
     */
    public function setBranding($branding)
    {
        if (is_string($branding)) {
            $this->branding = $branding;
        } else {
            throw new \Exception('Invalid branding supplied. Only string are allowed');
        }

        return $this;
    }

    /**
     * Check if given DNS entry exists. Results can be narrowd down by giving the type, content and and ttl
     *
     * @param $name
     * @param null $type
     * @param null $content
     * @param null $ttl
     * @return bool
     */
    public function dnsEntryExists($name, $type = null, $content = null, $ttl = null)
    {
        $exists = false;

        $arrayID = array_search(trim($name), array_map(function ($a) {
            /** @var DnsEntry $a */
            return $a->getName();
        }, $this->getDnsEntries()));

        if (is_numeric($arrayID)) {
            $exists = true;
            $dns    = $this->getDnsEntries($arrayID);

            if ($type !== null && $dns->getType() != $type) {
                $exists = false;
            }

            if ($content !== null && $dns->getContent() != $content) {
                $exists = false;
            }

            if ($ttl !== null && $dns->getTtl() != $ttl) {
                $exists = false;
            }
        }

        return $exists;
    }

    public function getBranding()
    {
        return $this->branding;
    }

    public function getAuthCode()
    {
        return $this->authCode;
    }

    public function isLocked()
    {
        return $this->isLocked;
    }

    public function getRegistrationDate()
    {
        return $this->registrationDate;
    }

    public function getRenewalDate()
    {
        return $this->renewalDate;
    }
}